@startuml
hide @unlinked
'#==============================================================================================
'# Framework
'#==============================================================================================
'#----------------------------------------------------
'# TestPlant
'#----------------------------------------------------
'--[ITestSystem]-------
interface Framework.TestPlant.ITestSystem $interface {
    ターゲットシステムを操作するインタフェースを提供します。
    ---
    + test_variable( variable_name, expected_value ) \n\t テスト対象のコードが正しくふるまったかどうか確認します。
}

'--[TestSystemDecorator]-------
abstract Framework.TestPlant.TestSystemDecorator $abstract implements Framework.TestPlant.ITestSystem {
    ITargetSystemのデコレータです。
    コンストラクタ引数にデコレーティを受け取ります。
    ---
    + __init__( decoratee : ITestSystem )
    - decoratee : ITestSystem
}

'--[ConcreteTestSystem]-------
class Framework.TestPlant.ConcreteTestSystem implements Framework.TestPlant.ITestSystem {
    テストシステムの具現クラスです。
    以下のようなテストシステムを想定しています。
    * MockSimulator
        テストフレームワークのデバッグに使う
        仮想のシミュレータです。
    * CsPlusSimulator
        CS+のシミュレータ環境です。
    * GhsSimulator
        GHSのシミュレータ環境です。
}

'--[TestSystemCallNotifier]-------
class Framework.TestPlant.TestSystemCallNotifier implements Framework.TestPlant.TestSystemDecorator {
    デコレートするテストシステムのコールを行った上で、
    Notifeeに通知します。
    ---
    + __init__( decoratee : ITestSystem )
    + set_notifee( notifee : ITestSystem )
    - notifee : ITestSystem
}

'--[TestPlantProvider]-------
class Framework.TestPlantProvider <<(S,skyblue) singleton>> {
    テストプラントを提供します。
    ターゲットシステムは同時に複数接続できないため、
    シングルトンとして実装されます。
    ---
    + setup() \n\t Providerのセットアップを行います。
    + system() : ITestSystem \n\t テストシステムを返します。
    + logger() : ITestLogger \n\t ロガーを返します。
    + tear_down() \n\t Providerを終了します。
}

'#----------------------------------------------------
'# Logger
'#----------------------------------------------------
'--[StateLogger]-------
interface Framework.Logger.ITestLogger $interface {
    テストロギングを行うインタフェースです。
    ----
    + set_stream( stream ) \n\t ログ出力先のストリームを指定してください。
    + log( message : str ) \n\t 任意の文字列をロギングしたい際にコールしてください。
    + start_test() \n\t テストの開始時にコールしてください。
    + start_suite( suite : ITestSuite ) \n\t テストスイートの開始時にコールしてください。
    + start_case( testcase : ITestCase ) \n\t テストケースの開始時にコールしてください。
    + start_step() \n\t テストステップの開始時にコールしてください。
    + end_step() \n\t テストの終了時にコールしてください。
    + end_case() \n\t テストスイートの終了時にコールしてください。
    + end_suite() \n\t テストケースの終了時にコールしてください。
    + end_test() \n\t テストステップの終了時にコールしてください。
}

'--[TestLogger]-------
class Framework.Logger.ConcreteTestLogger implements  Framework.TestPlant.ITestSystem, Framework.Logger.ITestLogger {
    ITestLoggerの具現クラスです。
    下記のような具現クラスを想定しています。
    * XmlTestLogger
    * YamlTestLogger
    * TextTestLogger
    * JsonTestLogger
    ITestSystemを実装しているため\nテストシステムコールのタイミングでもロギングを行えます。
}

interface Framework.ITestSuite $interface {
    + name() : str\n\t テストスイート名を返します
    + description() : str\n\t テストスイートの説明を返します
    + testcases() : Iterator[ITestCase]\n\t テストケースを生成し返すジェネレータです。
    + prepare() \n\t テストスイートの前処理を実施します
    + tear_down() \n\t テストスイートの後処理を実施します
}

interface Framework.ITestCase $interface {
    + name()  : str\n\t テストケース名を返します
    + description()  : str\n\t テストケースの説明を返します
    + prepare() \n\t テストケースの前処理を実施します
    + steps() : Iterator[bool] \n\t テストステップを実行します。\n\t ジェネレータとして実行してください。\n\t Falseを返すとテストケースを終了します。
    + tear_down() \n\t テストケースの後処理を実施します
}

class  Framework.TestDriver {
    テストプラントの初期化と、
    登録されたテストスイートの実行を担います。
    ----
    + launch( project : ITestProject ) \n\t 指定したテストプロジェクトを実行します。
}

interface Framework.ITestProject $interface {
    テストのプロジェクトファイルのインタフェースです。
    具現クラスのインスタンスをTestDriver.launchに渡しコールすることで
    一連のテストが実行されます。
    ---
    + logger() -> ITestLogger \n\t ロガーを指定します。
    + log_filename() -> str: \n\t ログファイル名を指定します。
    + log_encoding() -> str: \n\t ログファイルエンコーディングを指定します。
    + test_system() -> ITestSystem: \n\t テストシステムを指定します。
    + suites() -> Iterator: \n\t 実行するスイートのイテレータジェネレータを指定します。
}

'#==============================================================================================
'# User Test Scripts
'#==============================================================================================

class TestProject_A implements Framework.ITestProject {
    テストのプロジェクトファイルです。
    本クラスのインスタンスをTestDriver.launchに渡しコールすることで
    一連のテストが実行されます。
    ---
}

class Suites.TestSuiteX implements Framework.ITestSuite {
    具体的なテストスイートです。
    テストスイートの数だけクラスを作成してください。
    ITestSuiteを実装することで、
    TestDriverからの実行が可能になります。
}

class Suites.Cases.TestCaseX implements Framework.ITestCase {
    具体的なテストケースです。
    テストケースの数だけクラスを作成してください。
    ITestSuiteを実装することで、
    TestDriverからの実行が可能になります。
}

@enduml
